{
    "include": [
        "resources/js/**/*.ts",
        "resources/js/**/*.tsx",
        "resources/js/**/*.d.ts",
        "vite.config.ts",
        "resources/styled-system"
    ],
    "exclude": ["node_modules"],
    "compilerOptions": {
        /* Visit https://aka.ms/tsconfig to read more about this file */
        "types": ["vite/client"],
        /* Language and Environment */
        "target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
        "jsx": "preserve" /* Specify what JSX code is generated. */,
        "lib": ["dom", "dom.iterable", "esnext"],
        /* Modules */
        "module": "ESNext" /* Specify what module code is generated. */,
        "moduleResolution": "bundler" /* Specify how TypeScript looks up a file from a given module specifier. */,
        "paths": {
            "@app/*": ["./resources/js/*"],
            "@style-system/*": ["./resources/styled-system/*"]
        },
        "noEmit": true /* Disable emitting files from a compilation. */,

        /* Interop Constraints */
        "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
        "verbatimModuleSyntax": true /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */,
        "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
        "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
        "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

        /* Type Checking */
        "strict": true /* Enable all strict type-checking options. */,
        "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
        "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
        "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
        "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
        "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
        "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
        "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
        "noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,

        /* Completeness */
        "skipLibCheck": true /* Skip type checking all .d.ts files. */
    }
}
